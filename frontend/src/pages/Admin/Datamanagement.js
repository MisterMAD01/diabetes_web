import React, { useState } from "react";
import axios from "axios";
import "./DataManagement.css";

// ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å Font Awesome
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faUserInjured,
  faCalendarAlt,
  faHeartbeat,
  faUser,
  faClock,
  faDownload,
} from "@fortawesome/free-solid-svg-icons";

const API_URL = process.env.REACT_APP_API;

const DataManagement = () => {
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [downloadLogs, setDownloadLogs] = useState([]);

  const handleDownload = async (type, label) => {
    try {
      const params = {};
      if (startDate) params.startDate = startDate;
      if (endDate) params.endDate = endDate;

      const response = await axios.get(`${API_URL}/data/export/${type}`, {
        params,
        responseType: "blob",
      });

      const blob = new Blob([response.data]);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");

      const timestamp = new Date().toISOString().split("T")[0];
      const filename = `${type}_data_${timestamp}.csv`;

      link.href = url;
      link.setAttribute("download", filename);
      document.body.appendChild(link);
      link.click();
      link.remove();

      setDownloadLogs((prev) => [
        { label, date: new Date().toLocaleString(), filename },
        ...prev,
      ]);
    } catch (error) {
      console.error("Download error:", error.response?.data || error.message);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  return (
    <div className="data-container">
      <h2>
        <FontAwesomeIcon icon={faDownload} /> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      </h2>

      <div className="date-filters">
        <div className="input-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
          />
        </div>
        <div className="input-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
          />
        </div>
      </div>

      <div className="button-group">
        <button onClick={() => handleDownload("patient", "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")}>
          <FontAwesomeIcon icon={faUserInjured} /> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
        </button>
        <button onClick={() => handleDownload("appointments", "‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")}>
          <FontAwesomeIcon icon={faCalendarAlt} /> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        </button>
        <button onClick={() => handleDownload("health_data", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")}>
          <FontAwesomeIcon icon={faHeartbeat} /> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        </button>
        <button onClick={() => handleDownload("users", "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")}>
          <FontAwesomeIcon icon={faUser} /> ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        </button>
      </div>

      <div className="log-section">
        <h3>üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</h3>
        {downloadLogs.length === 0 ? (
          <p className="log-empty">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
        ) : (
          <ul className="log-list">
            {downloadLogs.map((log, index) => (
              <li key={index}>
                <FontAwesomeIcon icon={faClock} /> {log.label} ‚Äî {log.filename} ({log.date})
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default DataManagement;
