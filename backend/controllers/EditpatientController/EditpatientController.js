const db = require("../../config/db"); // ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const { calculateRiskScore } = require("../utils/calculateRiskScore");
const { assignRiskColor } = require("../utils/assignRiskColor");

exports.getPatientById = async (req, res) => {
  const { id } = req.params;
  console.log("üîç Fetching patient ID:", id);
  try {
    const [rows] = await db.query(
      "SELECT * FROM patient WHERE Patient_ID = ?",
      [id]
    );

    if (rows.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢" });
    }

    res.json(rows[0]);
  } catch (err) {
    console.error("‚ùå Error getting patient:", err);
    console.error("‚ùå Database error:", err); // ‡∏î‡∏π‡∏ó‡∏µ‡πà terminal
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ" });
  }
};

exports.updatePatient = async (req, res) => {
  const { id } = req.params;
  const {
    P_Name,
    Age,
    Birthdate,
    Phone_Number,
    Underlying_Disease,
    Address,
    Gender,
    Citizen_ID, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  } = req.body;

  try {
    const query = `
      UPDATE patient
      SET 
        P_Name = ?,
        Age = ?,
        Birthdate = ?,
        Phone_Number = ?,
        Underlying_Disease = ?,
        Address = ?,
        Gender = ?,
        Citizen_ID = ?     -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      WHERE Patient_ID = ?
    `;

    const values = [
      P_Name,
      Age,
      Birthdate,
      Phone_Number,
      Underlying_Disease,
      Address,
      Gender,
      Citizen_ID, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      id,
    ];

    await db.query(query, values);

    res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Error updating patient:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

exports.deletePatient = async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.query(
      "DELETE FROM patient WHERE Patient_ID = ?",
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
    }

    res
      .status(200)
      .json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Error deleting patient:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

exports.getHealthByPatientId = async (req, res) => {
  const { id } = req.params;

  try {
    const [rows] = await db.query(
      `SELECT Health_Data_ID, Date_Recorded, Diabetes_Mellitus, Systolic_BP, Diastolic_BP,
              Blood_Sugar, Height, Weight, Waist, Smoke, Note
       FROM health_data
       WHERE Patient_ID = ?
       ORDER BY Date_Recorded DESC`,
      [id]
    );

    res.json(rows);
  } catch (err) {
    console.error("‚ùå Error fetching health data:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ" });
  }
};

exports.updateHealthRecord = async (req, res) => {
  const { id } = req.params; // Health_Data_ID
  const {
    Diabetes_Mellitus,
    Systolic_BP,
    Diastolic_BP,
    Blood_Sugar,
    Height,
    Weight,
    Waist,
    Smoke,
    Note,
  } = req.body;

  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• health_data
    const query = `
      UPDATE health_data
      SET
        Diabetes_Mellitus = ?,
        Systolic_BP = ?,
        Diastolic_BP = ?,
        Blood_Sugar = ?,
        Height = ?,
        Weight = ?,
        Waist = ?,
        Smoke = ?,
        Note = ?
      WHERE Health_Data_ID = ?
    `;
    const values = [
      Diabetes_Mellitus,
      Systolic_BP,
      Diastolic_BP,
      Blood_Sugar,
      Height,
      Weight,
      Waist,
      Smoke,
      Note,
      id,
    ];

    const [result] = await db.query(query, values);

    if (result.affectedRows === 0) {
      return res
        .status(404)
        .json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    // ‚¨áÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Patient_ID ‡∏à‡∏≤‡∏Å Health_Data_ID
    const [rows] = await db.query(
      `SELECT Patient_ID FROM health_data WHERE Health_Data_ID = ?`,
      [id]
    );

    if (rows.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á" });
    }

    const patientId = rows[0].Patient_ID;

    // ‚¨áÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
    const risk = await calculateRiskScore(patientId);
    const color = await assignRiskColor(patientId);

    // ‚¨áÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Risk ‡πÅ‡∏•‡∏∞ Color ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á patient
    await db.query(
      `UPDATE patient SET Risk = ?, Color = ? WHERE Patient_ID = ?`,
      [risk, color, patientId]
    );

    res.json({
      message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      risk,
      color,
    });
  } catch (error) {
    console.error("‚ùå Error updating health record:", error);
    res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

exports.deleteHealthRecord = async (req, res) => {
  const { id } = req.params;

  try {
    // ‡∏î‡∏∂‡∏á Patient_ID ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö
    const [healthRows] = await db.query(
      "SELECT Patient_ID FROM health_data WHERE Health_Data_ID = ?",
      [id]
    );

    if (healthRows.length === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
    }

    const patientId = healthRows[0].Patient_ID;

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    const [result] = await db.query(
      "DELETE FROM health_data WHERE Health_Data_ID = ?",
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
    const [remainingHealth] = await db.query(
      "SELECT COUNT(*) AS count FROM health_data WHERE Patient_ID = ?",
      [patientId]
    );

    if (remainingHealth[0].count === 0) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Risk ‡πÅ‡∏•‡∏∞ Color
      await db.query(
        "UPDATE patient SET Risk = NULL, Color = NULL WHERE Patient_ID = ?",
        [patientId]
      );
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Risk ‡πÅ‡∏•‡∏∞ Color ‡πÉ‡∏´‡∏°‡πà
      const risk = await calculateRiskScore(patientId);
      const color = await assignRiskColor(patientId);

      await db.query(
        "UPDATE patient SET Risk = ?, Color = ? WHERE Patient_ID = ?",
        [risk, color, patientId]
      );
    }

    res
      .status(200)
      .json({ message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå Error deleting health record:", err);
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ" });
  }
};
